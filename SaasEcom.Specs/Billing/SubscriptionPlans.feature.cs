// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SaasEcom.Specs.Billing
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SubscriptionPlans")]
    public partial class SubscriptionPlansFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SubscriptionPlans.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SubscriptionPlans", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can see an empty list of subscription plans")]
        [NUnit.Framework.CategoryAttribute("Admin")]
        [NUnit.Framework.CategoryAttribute("AdminSubscriptionPlans")]
        public virtual void ICanSeeAnEmptyListOfSubscriptionPlans()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can see an empty list of subscription plans", new string[] {
                        "Admin",
                        "AdminSubscriptionPlans"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given("I am in the plans section of the Admin panel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.When("There are no plans in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
 testRunner.Then("I can see an empty list of plans", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can add a subscription plan")]
        [NUnit.Framework.CategoryAttribute("Admin")]
        [NUnit.Framework.CategoryAttribute("AdminSubscriptionPlans")]
        public virtual void ICanAddASubscriptionPlan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can add a subscription plan", new string[] {
                        "Admin",
                        "AdminSubscriptionPlans"});
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
 testRunner.Given("I am in the plans section of the Admin panel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
 testRunner.And("I click on Start creating a subscription plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "field",
                        "value"});
            table1.AddRow(new string[] {
                        "FriendlyId",
                        "test_plan_id"});
            table1.AddRow(new string[] {
                        "Name",
                        "Test plan name"});
            table1.AddRow(new string[] {
                        "Price",
                        "30.45"});
            table1.AddRow(new string[] {
                        "Interval",
                        "Monthly"});
            table1.AddRow(new string[] {
                        "TrialPeriodInDays",
                        "14"});
#line 15
 testRunner.When("I fill in the plan details", ((string)(null)), table1, "When ");
#line 22
 testRunner.Then("I can see the plan added in the list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a subscription plan validation")]
        [NUnit.Framework.CategoryAttribute("Admin")]
        [NUnit.Framework.CategoryAttribute("AdminSubscriptionPlans")]
        public virtual void AddASubscriptionPlanValidation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a subscription plan validation", new string[] {
                        "Admin",
                        "AdminSubscriptionPlans"});
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
 testRunner.Given("I am in the plans section of the Admin panel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 28
 testRunner.And("I click on Start creating a subscription plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "field",
                        "value"});
            table2.AddRow(new string[] {
                        "FriendlyId",
                        "test plan"});
            table2.AddRow(new string[] {
                        "Name",
                        ""});
            table2.AddRow(new string[] {
                        "Price",
                        "-1"});
            table2.AddRow(new string[] {
                        "Interval",
                        "Monthly"});
            table2.AddRow(new string[] {
                        "TrialPeriodInDays",
                        "-1"});
#line 29
 testRunner.When("I fill in the plan details wrong", ((string)(null)), table2, "When ");
#line 36
 testRunner.Then("I can see the plan form validation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can see a list of subscription plans")]
        [NUnit.Framework.CategoryAttribute("Admin")]
        [NUnit.Framework.CategoryAttribute("AdminSubscriptionPlans")]
        public virtual void ICanSeeAListOfSubscriptionPlans()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can see a list of subscription plans", new string[] {
                        "Admin",
                        "AdminSubscriptionPlans"});
#line 40
this.ScenarioSetup(scenarioInfo);
#line 41
 testRunner.When("I am in the plans section of the Admin panel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 42
 testRunner.And("There are plans in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
 testRunner.Then("I can see a list of plans", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can edit the name of a subscription plans")]
        [NUnit.Framework.CategoryAttribute("Admin")]
        [NUnit.Framework.CategoryAttribute("AdminSubscriptionPlans")]
        public virtual void ICanEditTheNameOfASubscriptionPlans()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can edit the name of a subscription plans", new string[] {
                        "Admin",
                        "AdminSubscriptionPlans"});
#line 47
this.ScenarioSetup(scenarioInfo);
#line 48
 testRunner.Given("I am in the plans section of the Admin panel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 49
 testRunner.And("There are plans in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
 testRunner.When("I click on edit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 51
 testRunner.And("Fill in the form with a valid name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
 testRunner.And("I click on save", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.Then("I can see a list of plans with the plan updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can disable a subscription plan")]
        [NUnit.Framework.CategoryAttribute("Admin")]
        [NUnit.Framework.CategoryAttribute("AdminSubscriptionPlans")]
        public virtual void ICanDisableASubscriptionPlan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can disable a subscription plan", new string[] {
                        "Admin",
                        "AdminSubscriptionPlans"});
#line 57
this.ScenarioSetup(scenarioInfo);
#line 58
 testRunner.Given("I am in the plans section of the Admin panel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 59
 testRunner.And("There are plans in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
 testRunner.When("I click on disable plan and confirm", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 61
 testRunner.Then("The plan is disabled and no more customers can join", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can delete a subscription plan")]
        [NUnit.Framework.CategoryAttribute("Admin")]
        [NUnit.Framework.CategoryAttribute("AdminSubscriptionPlans")]
        public virtual void ICanDeleteASubscriptionPlan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can delete a subscription plan", new string[] {
                        "Admin",
                        "AdminSubscriptionPlans"});
#line 65
this.ScenarioSetup(scenarioInfo);
#line 66
 testRunner.Given("I am in the plans section of the Admin panel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 67
 testRunner.And("There are plans in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
 testRunner.And("No customers have signed up for the plan yet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
 testRunner.When("I click on delete plan and confirm", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
 testRunner.Then("The plan is deleted from the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
